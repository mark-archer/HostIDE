
type Node: fields val[int]=0 next[Node]=null

fn sumOfLinkedList(head) 
	var sum : 0
	var current : head
	while (!= current null)
		set sum (+ sum current.val)
		set current current.next

	cout sum	

var head : new Node val=5
set head.next (new Node val=7)
set head.next.next (new Node val=3)

sumOfLinkedList head

;; remove node
set head.next head.next.next

sumOfLinkedList head

>> return

cd """C:\Users\mark_\Desktop\ANN-Host"""
set reader.currentDir cd!

run "./ann.host"
var bits 5
annPredictBits bits=bits memDepth=19

var sTime : date!
var eTime : date!
for(i 1000)
	annStep!
	if(== stepCnt lastIncorrectGen)
		set eTime date!
	if (> (- stepCnt lastIncorrectGen) (* (Math.pow 2 bits) 2))
		break!
	map getPredictors! n: printN n
	>> unshift : + "lw=" lastIncorrectGen " sec=" : / (- eTime sTime) 1000
	>> unshift : + "nCount=" neurons.length "  gen=" stepCnt
	>> cout

neurons >> filter n: n.isMem
_.length


